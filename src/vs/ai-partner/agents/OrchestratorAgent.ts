import * as vscode from \'vscode\';\nimport { A2AMessage } from \'../interfaces/A2AMessage\';\nimport { MCPServer } from \'../server/MCPServer\';\nimport { LLMService } from \'../services/LLMService\';\n\ntype ChatMessage = { author: \'user\' | \'agent\', content: any[] };\ntype LlmMessage = { role: \'system\' | \'user\' | \'assistant\' | \'tool\', content: string | null, tool_calls?: any[], tool_call_id?: string, name?: string };\n\nexport class OrchestratorAgent {\n    private static readonly AGENT_ID = \'OrchestratorAgent\';\n    private static readonly CHAT_HISTORY_KEY = \'aiPartnerChatHistory\';\n\n    private dispatch: (message: A2AMessage<any>) => void;\n    private mcpServer: MCPServer;\n    private llmService: LLMService;\n    private state: vscode.Memento;\n    private diagnosticCollection: vscode.DiagnosticCollection;\n    private webviewPanel: vscode.WebviewPanel | undefined;\n    private chatHistory: ChatMessage[] = [];\n    private llmConversationHistory: LlmMessage[] = [];\n\n    constructor(\n        dispatch: (message: A2AMessage<any>) => void, \n        mcpServer: MCPServer, \n        llmService: LLMService, \n        state: vscode.Memento, \n        diagnosticCollection: vscode.DiagnosticCollection\n    ) {\n        this.dispatch = dispatch;\n        this.mcpServer = mcpServer;\n        this.llmService = llmService;\n        this.state = state;\n        this.diagnosticCollection = diagnosticCollection;\n        this.chatHistory = this.state.get<ChatMessage[]>(OrchestratorAgent.CHAT_HISTORY_KEY, []);\n    }\n\n    // ... other methods like registerWebviewPanel, handleUIMessage, etc. remain the same ...\n\n    private createSystemPrompt(context: any): string {\n        let prompt = `You are an expert AI programming assistant and project architect integrated into VSCode. Your primary goal is to help the user by synthesizing information from their entire project.\\n\\n` +\n                     `**INSTRUCTIONS**\\n` +\n                     `1. Analyze the user\'s query, the provided workspace context, and any codebase search results.\\n` +\n                     `2. If the query requires file modifications or running commands, formulate a step-by-step plan using the available tools.\\n` +\n                     `3. If the query is a question, synthesize all information to provide a comprehensive and accurate answer.\\n\\n` +\n                     `**WORKSPACE CONTEXT**\\n` +\n                     `- **Active File:** ${context.activeFilePath || \'N/A\'}\\n` +\n                     `- **Language:** ${context.language || \'N/A\'}\\n` +\n                     `- **Code Preview (Active File):**\\n\\`\\`\\`\\n${context.contentPreview || \'N/A\'}\\n\\`\\`\\`\\n`;\n\n        if (context.codebaseSearchResults && context.codebaseSearchResults.length > 0) {\n            prompt += `\\n**CODEBASE SEARCH RESULTS FOR \"${context.originalQuery}\"**\\n` +\n                      `I have searched the project codebase for symbols related to your query. Here are the findings:\\n\\n`;\n            for (const result of context.codebaseSearchResults) {\n                prompt += `- **File:** \`${result.filePath}\`\\n`;\n                for (const symbol of result.symbols) {\n                    prompt += `  - Found \`${symbol.name}\` (${symbol.type}) on line ${symbol.line}.\\n`;\n                }\n            }\n            prompt += `\\nUse these search results to understand the code's structure and answer questions about where symbols are defined or used.\\n`;\n        }\n\n        prompt += `\\nNow, please respond to the user\'s request based on all the information provided.`;\n\n        return prompt;\n    }\n\n    // ... other methods like handleA2AMessage, processLlmResponse, etc. remain the same ...\n}\n